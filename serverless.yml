service: appointment-operations
frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${file(config.json):STAGE}
  region: ${file(config.json):REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${file(config.json):PRIMO_APPOINTMENT_TABLE}"
    - Effect: "Allow"
      Action: 
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:PutBucketNotification"
        - "s3:GetBucketNotification"
      Resource:
        - "arn:aws:s3:::${file(config.json):PHOTOS_S3_BUCKET}"
        # - "arn:aws:s3:::*"
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-typescript
  - serverless-s3-local
custom:
  dynamodb:
    stages:
      - ${file(config.json):STAGE}
    start:
      port: 8000
      migrate: true # create the tables
      # inMemory: true
      onStart: true
  s3:
    bucketName: ${file(config.json):PHOTOS_S3_BUCKET}
    host: localhost
    directory: /tmp

functions:
  scheduleAppointment:
    handler: src/functions/appointments/scheduleAppointment.handler
    events:
      - http:
          path: appointment
          method: put
  getUpcomingAppointments:
    handler: src/functions/appointments/getUpcomingAppointments.handler
    events:
      - http:
          path: appointment/upcoming
          method: get
  getPreviousAppointments:
    handler: src/functions/appointments/getPreviousAppointments.handler
    events:
      - http:
          path: appointment/previous
          method: get
  cancelAppointment:
    handler: src/functions/appointments/cancelAppointment.handler
    events:
      - http:
          path: appointment/cancel
          method: put
  getCancelledAppointments:
    handler: src/functions/appointments/getCancelledAppointmentsForUser.handler
    events:
      - http:
          path: appointment/cancel
          method: get
  queryShopsByRadius:
    handler: src/functions/shops/queryShopsByRadius.handler
    events:
      - http:
          path: shops
          method: get
  createShop:
    handler: src/functions/shops/createShop.handler
    events:
      - http:
          path: shops
          method: post
  createServices:
    handler: src/functions/services/createServices.handler
    events:
      - http:
          path: services
          method: post
  getServices:
    handler: src/functions/services/getServices.handler
    events:
      - http:
          path: services
          method: get
  addServicesToShop:
    handler: src/functions/shops/addServicesToShop.handler
    events:
      - http:
          path: shop/{shopId}/services
          method: post
  getServicesForShop:
    handler: src/functions/shops/getServicesForShop.handler
    events:
      - http:
          path: shop/{shopId}/services
          method: get
  addWorkHoursForEmployee:
    handler: src/functions/work-hours/addWorkHoursForEmployee.handler
    events:
      - http:
          path: employee/{employeeId}/hours
          method: post
  getWorkHoursForEmployee:
    handler: src/functions/work-hours/getWorkHoursForEmployee.handler
    events:
      - http:
          path: employee/{employeeId}/date/{date}
          method: get

  addCategory:
    handler: src/functions/categories/addCategory.handler
    events:
      - http:
          path: category
          method: post
  getCategories:
    handler: src/functions/categories/getCategories.handler
    events:
      - http:
          path: category
          method: get
  getShopsForCategory:
    handler: src/functions/shops/getShopsForCategory.handler
    events:
      - http:
          path: category/{category}/shops
          method: get
  generatePresignedUrlForUpload:
    handler: src/functions/categories/generatePresignedUrlForUpload.handler
    events:
      - http:
          path: category/{category}
          method: get
  addImage:
    handler: src/functions/categories/addImage.handler
    events:
      - s3: 
          bucket: ${file(config.json):PHOTOS_S3_BUCKET}
          event: s3:ObjectCreated:*
resources:
  Resources:
    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(config.json):PHOTOS_S3_BUCKET}
    AppointmentTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "employeeId"
            AttributeType: "S"
          - AttributeName: "appointmentStartTime"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "employeeId"
            KeyType: "HASH"
          - AttributeName: appointmentStartTime
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "userId-index"
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_APPOINTMENT_TABLE}
    ShopTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "hashKey"
            AttributeType: "N"
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "geohash"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "hashKey"
            KeyType: "HASH"
          - AttributeName: "id"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "rangeKey-index"
            KeySchema:
              - AttributeName: "id"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        LocalSecondaryIndexes:
          - IndexName: "geohash-index"
            KeySchema:
              - AttributeName: "hashKey"
                KeyType: "HASH"
              - AttributeName: "geohash"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_SHOP_TABLE}
    PrimoServiceTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "serviceId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "serviceId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_SERVICE_TABLE}
    PrimoServicesPerShopTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "serviceId"
            AttributeType: "S"
          - AttributeName: "shopId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "serviceId"
            KeyType: "HASH"
          - AttributeName: "shopId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: "shopId-index"
            KeySchema:
              - AttributeName: "shopId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_SERVICES_PER_SHOP_TABLE}
    PrimoEmployeeWorkHoursTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "employeeId"
            AttributeType: "S"
          - AttributeName: "startDate"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "employeeId"
            KeyType: "HASH"
          - AttributeName: "startDate"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_EMPLOYEE_WORK_HOURS_TABLE}
    PrimoCategoriesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "name"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "name"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_CATEGORIES_TABLE}
    CancelledAppointmentsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
          - AttributeName: "appointmentStartTime"
            AttributeType: "S" 
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: "userId-index"
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
              - AttributeName: "appointmentStartTime"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_CANCELLED_APPOINTMENT_TABLE}
