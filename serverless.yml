service: appointment-operations
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${file(config.json):STAGE}
  region: ${file(config.json):REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${file(config.json):PRIMO_APPOINTMENT_TABLE}"
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-typescript
#Local DynamoDb configuration
custom:
  dynamodb:
    stages:
      - ${file(config.json):STAGE}
    start: 
      port: 8000
      migrate: true # create the tables
      # inMemory: true
      onStart: true

functions:
  getAppointments:
    handler: src/functions/appointments/getAvailableAppointments.handler
    events:
      - http:
          path: appointment/employee/{employeeId}/date/{date}
          method: get
  generateAppointments:
    handler: src/functions/appointments/generateAppointments.hanler
    events:
      - http:
          path: appointment
          method: post
  scheduleAppointment:
    handler: src/functions/appointments/scheduleAppointment.handler
    events:
      - http:
          path: appointment
          method: put
  getUpcomingAppointments:
    handler: src/functions/appointments/getUpcomingAppointments.handler
    events:
      - http:
          path: appointment/upcoming
          method: get
  getPreviousAppointments:
    handler: src/functions/appointments/getPreviousAppointments.handler
    events:
      - http:
          path: appointment/previous
          method: get
  queryShopsByRadius:
    handler: src/functions/shops/queryShopsByRadius.handler
    events:
      - http:
          path: shops
          method: get
  createShop:
    handler: src/functions/shops/createShop.handler
    events:
      - http:
          path: shops
          method: post
  createServices:
    handler: src/functions/services/createServices.handler
    events:
      - http:
          path: services
          method: post
  getServices:
    handler: src/functions/services/getServices.handler
    events:
      - http:
          path: services
          method: get
  addServicesToShop:
    handler: src/functions/shops/addServicesToShop.handler
    events:
      - http:
          path: shop/{shopId}/services
          method: post
  getServicesForShop:
    handler: src/functions/shops/getServicesForShop.handler
    events:
      - http:
          path: shop/{shopId}/services
          method: get
resources:
  Resources:
    AppointmentTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "employeeId"
          AttributeType: "S"
        - AttributeName: "appointmentStartTime"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "employeeId"
          KeyType: "HASH"
        - AttributeName: appointmentStartTime
          KeyType: "RANGE"  
        GlobalSecondaryIndexes:
          - IndexName: "userId-index"
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_APPOINTMENT_TABLE}
    ShopTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "hashKey"
          AttributeType: "N"
        - AttributeName: "rangeKey"
          AttributeType: "S"
        - AttributeName: "geohash"
          AttributeType: "N"
        KeySchema:
        - AttributeName: "hashKey"
          KeyType: "HASH"
        - AttributeName: "rangeKey"
          KeyType: "RANGE"  
        GlobalSecondaryIndexes:
          - IndexName: "rangeKey-index"
            KeySchema:
              - AttributeName: "rangeKey"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        LocalSecondaryIndexes:
        - IndexName: "geohash-index"
          KeySchema:
          - AttributeName: "hashKey"
            KeyType: "HASH"
          - AttributeName: "geohash"
            KeyType: "RANGE"  
          Projection:
              ProjectionType: "ALL"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_SHOP_TABLE}
    PrimoServiceTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "serviceId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "serviceId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_SERVICE_TABLE}
    PrimoServicesPerShopTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "serviceId"
          AttributeType: "S"
        - AttributeName: "shopId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "serviceId"
          KeyType: "HASH"
        - AttributeName: "shopId"
          KeyType: "RANGE"  
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: "shopId-index"
            KeySchema:
              - AttributeName: "shopId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${file(config.json):PRIMO_SERVICES_PER_SHOP_TABLE}
